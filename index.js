(()=>{"use strict";class e{constructor(e,t,s){this._cardData=e,this._link=e.link,this._name=e.placename,this._selectorTemplate=t,this._openImagePopup=s,this._cloneElement=document.querySelector(this._selectorTemplate).content.querySelector(".template__list").cloneNode(!0),this._imageElement=this._cloneElement.querySelector(".element__mask-group"),this._likeIconElement=this._cloneElement.querySelector(".element__like"),this._trashElement=this._cloneElement.querySelector(".element__trash"),this._subTitle=this._cloneElement.querySelector(".element__title")}_handleOpenImageInPopupImage=()=>{this._openImagePopup(this._cardData)};_handleDelete=()=>{this._cloneElement.remove(),this._cloneElement=null};_toggleLike=()=>{this._likeIconElement.classList.toggle("element__like_active")};_setEventListener(){this._likeIconElement.addEventListener("click",this._toggleLike),this._trashElement.addEventListener("click",this._handleDelete),this._imageElement.addEventListener("click",this._handleOpenImageInPopupImage)}createCard(){return this._imageElement.src=this._link,this._imageElement.alt=this._name,this._subTitle.textContent=this._name,this._setEventListener(),this._cloneElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._currentInputErrorContainer=e.currentInputErrorContainer,this._disableButtonClass=e.disableButtonClass,this._textErrorActive=e.textErrorActive,this._form=t,this._button=t.querySelector(this._submitButtonSelector),this._inputList=t.querySelectorAll(this._inputSelector)}_showInputError(){this._errorTextElement.classList.add(this._textErrorActive),this._errorTextElement.textContent=this._input.validationMessage}_hideInputError(){this._errorTextElement.classList.remove(this._textErrorActive),this._errorTextElement.textContent=""}_enableButton(){this._button.classList.remove(this._disableButtonClass),this._button.removeAttribute("disabled")}_disableButton(){this._button.classList.add(this._disableButtonClass),this._button.setAttribute("disabled",!0)}_hasValidInput(){return Array.from(this._inputList).every((e=>e.validity.valid))}_toggleButtonState(){this._hasValidInput()?this._enableButton():this._disableButton(this._button)}_checkValidity(){this._errorTextElement=document.querySelector(`#${this._input.id}-error`),this._input.validity.valid?this._hideInputError():this._showInputError()}_setEventListener(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._input=e,this._checkValidity(),this._toggleButtonState()}))}))}enableValidation(){this._setEventListener()}resetErrorBeforeOpenForm(){this._inputList.forEach((e=>{this._input=e,this._errorTextElement=document.querySelector(`#${this._input.id}-error`),e.validity.valid||this._hideInputError()})),this._disableButton()}}console.log("hi");class s{constructor(e){this._popup=document.querySelector(e),this._popupCloseButton=this._popup.querySelector(".popup__close")}_handleEscapeClose=e=>{"Escape"===e.key&&this.close()};_handleCloseButton=()=>{this.close()};_handleClickByOverlay=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._popupCloseButton.addEventListener("click",this._handleCloseButton),this._popup.addEventListener("mousedown",this._handleClickByOverlay)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}}class n extends s{constructor(e,t){super(e),this._submitFunction=t,this._form=this._popup.querySelector(".popup__form"),this._inputList=this._form.querySelectorAll(".popup__input")}getInputsValue(){return this._values={},this._inputList.forEach((e=>{this._values[e.name]=e.value})),this._values}setInputsValue(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._submitFunction)}close(){super.close(),this._form.reset()}}const r=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-button"),o={},l={inputSelector:".popup__input",submitButtonSelector:".popup__button-save-profile",currentInputErrorContainer:"input.id",disableButtonClass:"popup__button-invalid",textErrorActive:"error"},p=new class{constructor(e){this._profileName=document.querySelector(e.profileNameSelector),this._profileJob=document.querySelector(e.profileJobSelector)}getUserInfo(){return{yourname:this._profileName.textContent,yourjob:this._profileJob.textContent}}setUserInfo(e){this._profileName.textContent=e.yourname,this._profileJob.textContent=e.yourjob}}({profileNameSelector:".profile__title",profileJobSelector:".profile__subtitle"}),a=new class extends s{constructor(e){super(e),this._popupImage=this._popup.querySelector(".popup__image"),this._imagePopupFigcaptionText=this._popup.querySelector(".popup__figcaption-text")}open=e=>{this._popupImage.src=e.link,this._popupImage.alt=e.placename,this._imagePopupFigcaptionText.textContent=e.placename,super.open()}}(".popup_section_increase-image");a.setEventListeners();const u=new class{constructor(e,t){let{items:s,renderer:n}=e;this._container=document.querySelector(t),this._initialCard=s,this.renderer=n}renderItems(){this._initialCard.forEach((e=>{this.addItem(this.renderer(e))}))}addItem(e){this._container.prepend(e)}}({items:[{placename:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{placename:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{placename:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{placename:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{placename:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{placename:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}],renderer:t=>new e(t,"#cardElement",a.open).createCard()},".elements__list-template");u.renderItems();const c=new n(".popup_section_edit-profile",(e=>{e.preventDefault(),p.setUserInfo(c.getInputsValue()),c.close()}));c.setEventListeners();const _=new n(".popup_section_create-card",(e=>{e.preventDefault(),u.addItem(u.renderer(_.getInputsValue())),_.close()}));_.setEventListeners(),Array.from(document.forms).forEach((e=>{const s=new t(l,e),n=e.name;o[n]=s,s.enableValidation()})),r.addEventListener("click",(()=>{o.popupEditProfileForm.resetErrorBeforeOpenForm(),c.setInputsValue(p.getUserInfo()),c.open()})),i.addEventListener("click",(()=>{o.popupCreateCardForm.resetErrorBeforeOpenForm(),_.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,